---
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";
import { CollectionEntry, getCollection } from "astro:content";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("en");

const tPageTitle = t("tutorials.title");
const tPageDesc = t("tutorials.description");
export interface Props {
  post: CollectionEntry<"blog">;
}
export async function getStaticPaths() {
  const posts = await getCollection(
    "blog",
    ({ id, data }) => id.startsWith(`${i18next.language}/`) && !data.draft
  );
  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));
  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));
  return [...postResult, ...pagePaths];
}
const { slug } = Astro.params;
const { page, post } = Astro.props;
const posts = await getCollection("blog");
const sortedPosts = getSortedPosts(posts);
const totalPages = getPageNumbers(sortedPosts.length);
const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;
const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
      pageTitle={tPageTitle}
      pageDescription={tPageDesc}
    />
  )
}
